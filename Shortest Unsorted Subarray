'''
Problem #1: Shortest Unsorted Subarray
Given an array, find the length of the smallest subarray in it which when sorted will sort the whole array.

Examples:

Input: [1, 2, 5, 3, 7, 10, 9, 12]
Output: 5
Explanation: We need to sort only the subarray [5, 3, 7, 10, 9] to make the whole array sorted

Input: [1, 3, 2, 0, -1, 7, 10]
Output: 5
Explanation: We need to sort only the subarray [1, 3, 2, 0, -1] to make the whole array sorted


Approach:
Scan from left to right and find first element that is out of order
Scan from right to left and find first element that is out of order
find the local minimum and local maximum in that sub array
extend the subarray on both end to include any number bigger than the local minimum and smaller than the local maximum
'''

def subarray(nums):
    length = len(nums)
    #left and right pointers
    left = 0
    right = length - 1
    #flag to check if it's already sorted (edge case)
    Sorted = True

    #Scan from left to right and find first element that is out of order
    while(left < length - 1):
        if nums[left] > nums[left+1]:
            tempL = left
            Sorted = False
            break
        left += 1

    #Scan from right to left and find first element that is out of order
    while(right > 1):
        if nums[right] < nums[right-1]:
            tempR = right
            Sorted = False
            break
        right -= 1

    #find the local minimum and local maximum in that sub array
    localMin = min(nums[tempL:tempR+1])
    localMax = max(nums[tempL:tempR+1])

    #extend the subarray on both end to include any number bigger than the local minimum and smaller than the local maximum in the next 2 loops
    for i in range(tempL):
        if nums[i] > localMin:
            tempL = i
            break

    for i in range(tempR, -1, -1):
        if nums[i] < localMax:
            tempR = i
            break

    if Sorted:
        return 0
    return len(nums[tempL:tempR+1])
arr=[1,2,3]

print(subarray(arr))
