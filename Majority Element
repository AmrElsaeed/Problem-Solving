'''
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.



Examples:

Input: nums = [3,2,3], majority >1.5
Output: 3

Input: nums = [2,2,1,1,1,2,2],majority >3.5
Output: 2

Input: nums = [1,2],majority >1
Output: 1 or 2

2 soultiuons:
a) sorting
sort the array
then get the middle element and that should be the majorirty element
Time: O(nlogn) Space: O(1)
b) hash map
create a map where the numbers are the key and the values are the number of occurances
traverse through the array and add to the map
traverse through the map and look for a value > majority
Time: O(n) Space: O(n)
'''
import math as m
def majority_element(nums):
    map = {}
    majority = len(nums) / 2
    for element in nums:
        if element in map:
            map[element] += 1
        else:
            map[element] = 1
    for key in map:
        if map[key] > majority:
            return key

print(majority_element([3,2,3]))
print(majority_element([2,2,1,1,1,2,2]))
