'''
Let's define a rotated array as a sorted array where the numbers have all been rotated to the right some number of places
with numbers wrapping around when they reach the end of the list.
[1,2,3,4,5] rotated 3 times is [3,4,5,1,2]
Given a rotated array, find the number of times it was rotated

edge case:
rotated n-1 times
rotated 0 times

Approach:
use binary search O(logn)
create left and right pointers
calcualte middle
check if middle-1>middle and middle+1 > middle-->solution here
else if middle is greater than left then ignore the left part as it's sorted
else if middle is less than left then ignore right part as it's sorted
'''

def rotated(nums):
    length = len(nums)
    left = 0
    right = length - 1
    while left < right:
        #rounding up to handle the case when it's rotated n-1 times
        middle = round((left + right) / 2)
        if nums[middle - 1] > nums[middle]:
            #try-except to handle the case if it's rotated n-1 times
            try:
                if nums[middle+1] > nums[middle]:
                    return middle
            #in this case the middle is the last element and you don't want to go out of range so you wrap around list and compare with nums[0]
            except:
                if nums[0] > nums[middle]:
                    return middle
        elif nums[middle] > nums[left]:
            left = middle
        elif nums[middle] < nums[left]:
            right = middle

    return 0
    
#simpler solution    
def rotated2(nums):
    length = len(nums)
    left = 0
    right = length - 1
    #check if it's already sorted
    if nums[-1] > nums[0]:
        return 0
    while left < right:
        middle = (left + right) // 2
        if nums[middle] > nums[left]:
            left = middle
        elif nums[middle] < nums[left]:
            right = middle
        else:
            return right



arr = [3,4,5,1,2]
arr1 = [2,3,4,5,1]
arr2 = [6,8,12,1,3]
arr4 = [1,2,3,4,5]
print(rotated(arr))
print(rotated(arr1))
print(rotated(arr2))
print(rotated(arr4))
